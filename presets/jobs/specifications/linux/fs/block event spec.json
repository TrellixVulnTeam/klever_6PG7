{
  "3.14": {
    "environment processes": {
      "block_scenario": {
        "actions": {
          "call": {
            "comment": "Initializations are done, proceed to the other callbacks.",
            "process": "[callback].{call} | [release].<free>.(deregister)"
          },
          "callback": {
            "callback": "%callback%",
            "comment": "Call any random callback.",
            "parameters": [
              "%block%"
            ]
          },
          "deregister": {
            "condition": [
              "%disk% == $ARG1"
            ],
            "parameters": [
              "%disk%"
            ]
          },
          "free": {
            "comment": "Free memory of block device.",
            "trace relevant": true,
            "statements": [
              "$FREE(%block%);"
            ]
          },
          "main": {
            "comment": "Block device is not initialized.",
            "process": "[open].(<y_ret>.{call} | <n_ret>.{main})"
          },
          "n_ret": {
            "comment": "Block device open has failed.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "open": {
            "callback": "%ops.open%",
            "callback return value": "%ret%",
            "comment": "Initialize block device.",
            "parameters": [
              "%block%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "register": {
            "parameters": [
              "%block%",
              "%disk%"
            ]
          },
          "release": {
            "callback": "%ops.release%",
            "comment": "Release block device.",
            "parameters": [
              "%disk%"
            ]
          },
          "y_ret": {
            "comment": "Block device open has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          }
        },
        "comment": "Invoke Block device operations callbacks.",
        "labels": {
          "block": {
            "interface": [
              "block_device.block_dev"
            ],
            "pointer": true,
            "resource": true
          },
          "callback": {
            "callback": true
          },
          "disk": {
            "container": true,
            "interface": [
              "block_device.gendisk"
            ]
          },
          "ops": {
            "container": true,
            "interface": [
              "block_device.block_device_operations"
            ],
            "pointer": true
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "process": "(!register).{main}",
        "reference": true
      }
    },
    "functions models": {
      "add_disk": {
        "actions": {
          "assign": {
            "comment": "Get disk from arguments.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%block%);",
              "%disk% = $ARG1;",
              "%block%->bd_disk = %disk%;",
              "ldv_add_disk();"
            ]
          },
          "register": {
            "parameters": [
              "%block%",
              "%disk%"
            ]
          }
        },
        "comment": "Add partitioning information to kernel list.",
        "labels": {
          "block": {
            "interface": [
              "block_device.block_dev"
            ],
            "parameter": true,
            "pointer": true,
            "resource": true
          },
          "disk": {
            "container": true,
            "interface": [
              "block_device.gendisk"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register]",
        "reference": true
      },
      "del_gendisk": {
        "actions": {
          "assign": {
            "comment": "Get disk from arguments.",
            "trace relevant": true,
            "statements": [
              "%disk% = $ARG1;",
              "ldv_del_gendisk();"
            ]
          },
          "deregister": {
            "parameters": [
              "%disk%"
            ]
          }
        },
        "comment": "Remove partitioning information from kernel list.",
        "labels": {
          "disk": {
            "container": true,
            "interface": [
              "block_device.gendisk"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      }
    }
  }
}