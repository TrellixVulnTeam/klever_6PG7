{
  "3.14": {
    "functions models": {},
    "environment processes": {
      "super_operations_scenario": {
        "comment": "Super operations scenario.",
        "reference": true,
        "headers": [
          "linux/fs.h"
        ],
        "labels": {
          "super_ops": {
            "container": true,
            "pointer": true,
            "interface": [
              "super_operations.super_operations"
            ]
          },
          "super_block": {
            "interface": [
              "super_operations.super_block"
            ]
          },
          "inode": {
            "interface": [
              "super_operations.inode"
            ]
          },
          "dentry": {
            "interface": [
              "super_operations.dentry"
            ]
          },
          "kstatfs": {
            "interface": [
              "super_operations.kstatfs"
            ]
          }
        },
        "process": "(!super_operations_register).<get_superblock>.{main}",
        "declarations": {
          "environment model": {
            "ldv_super_block": "struct super_block *ldv_super_block;\n"
          }
        },
        "actions": {
          "main": {
            "comment": "Going to initialize super block.",
            "process": "([alloc_inode].(<alloc_success>.[evict_inode].[destroy_inode] | <alloc_fail>) | [statfs]).[put_super].(super_operations_deregister)"
          },
          "get_superblock": {
            "comment": "Use the already initialized super block.",
            "statements": [
              "%super_block% = ldv_super_block;"
            ]
          },
          "super_operations_register": {
            "comment": "Begin executing super operations callbacks.",
            "parameters": []
          },
          "super_operations_deregister": {
            "comment": "Finish the scenario related to the super operations.",
            "condition": [],
            "parameters": []
          },
          "put_super": {
            "comment": "Stop using the super block.",
            "callback": "%super_ops.put_super%",
            "parameters": [
              "%super_block%"
            ]
          },
          "alloc_inode": {
            "comment": "Allocate a new inode and all relevant auxiliary structures.",
            "callback": "%super_ops.alloc_inode%",
            "parameters": [
              "%super_block%"
            ],
            "callback return value": "%inode%"
          },
          "alloc_success": {
            "comment": "Successfully allocated an inode.",
            "condition": [
              "%inode% != 0"
            ],
            "trace relevant": true,
            "statements": []
          },
          "alloc_fail": {
            "comment": "Failed to allocate a new inode.",
            "condition": [
              "%inode% == 0"
            ]
          },
          "evict_inode": {
            "comment": "There is no links to the inode and we can prepare the inode for deleting.",
            "callback": "%super_ops.evict_inode%",
            "parameters": [
              "%inode%"
            ]
          },
          "destroy_inode": {
            "comment": "Delete the inode and relevant auxiliary structures.",
            "callback": "%super_ops.destroy_inode%",
            "parameters": [
              "%inode%"
            ]
          },
          "statfs": {
            "comment": "Get filesystem statistics.",
            "callback": "%super_ops.statfs%",
            "parameters": [
              "%dentry%", "%kstatfs%"
            ],
            "pre-call": [
              "$ZALLOC(%dentry%);",
              "$ZALLOC(%kstatfs%);",
              "%dentry%->d_sb = %super_block%;"
            ],
            "post-call": [
              "$FREE(%dentry%);",
              "$FREE(%kstatfs%);"
            ]
          }
        }
      }
    }
  }
}