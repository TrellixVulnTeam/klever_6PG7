{
  "3.14": {
    "environment processes": {
      "character_driver_scenario": {
        "actions": {
          "call": {
            "comment": "Device file is opened, ready to read and write.",
            "process": "([callback] | [write]).{call[1]} | [release].{main[1]}"
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%inode%",
              "%file%",
              "%size_cnt%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "free": {
            "comment": "Free memory of file and inode structures.",
            "trace relevant": true,
            "statements": [
              "$FREE(%inode%);",
              "$FREE(%file%);"
            ]
          },
          "init": {
            "comment": "Allocate memory for file and inode structures.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%inode%);",
              "$ALLOC(%file%);",
              "%size_cnt% = ldv_undef_int();"
            ]
          },
          "main": {
            "comment": "Device appeared in the system.",
            "process": "[probe].(<probe_success>.{call} | <probe_fail>.{main[1]}) | <free>.(deregister)"
          },
          "probe": {
            "callback": "%container.probe%",
            "callback return value": "%ret%",
            "comment": "Open the device file.",
            "parameters": [
              "%inode%",
              "%file%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "probe_fail": {
            "comment": "Failed to open devices file.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "probe_success": {
            "comment": "Device file is opened successfully.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "comment": "File structure is released.",
            "parameters": [
              "%inode%",
              "%file%"
            ]
          },
          "write": {
            "callback": "%container.write%",
            "comment": "Write data to the device.",
            "parameters": [
              "%file%",
              "%size_cnt%"
            ],
            "pre-call": [
              "/* MAX_RW_COUNT moved to 'linux/fs.h' since 2.6.37, before it was defined in 'fs/read_write.c' */",
              "#if !defined(MAX_RW_COUNT)",
              "  #define MAX_RW_COUNT (INT_MAX & PAGE_CACHE_MASK)",
              "#endif",
              "ldv_assume(%size_cnt% <= MAX_RW_COUNT);"
            ]
          }
        },
        "comment": "Invoke file_operations callbacks.",
        "headers": [
          "linux/fs.h",
          "linux/pagemap.h",
          "linux/poll.h"
        ],
        "labels": {
          "callback": {
            "callback": true
          },
          "container": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          },
          "inode": {
            "interface": [
              "file_operations.inode"
            ],
            "resource": true
          },
          "file": {
            "interface": [
              "file_operations.file"
            ],
            "resource": true
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "size_cnt": {
            "interface": [
              "file_operations.write_size"
            ],
            "resource": true
          }
        },
        "process": "(!register).<init>.{main}",
        "reference": true
      }
    },
    "functions models": {
      "cdev_del": {
        "actions": {
          "assign": {
            "comment": "Extract a file_operations structure pointer.",
            "condition": [],
            "trace relevant": true,
            "statements": [
              "%cdev% = $ARG1;",
              "%file_operations% = %cdev%->ops;"
            ]
          },
          "deregister": {
            "parameters": [
              "%file_operations%"
            ]
          }
        },
        "comment": "Deregister cdev structure of the character driver.",
        "labels": {
          "cdev": {
            "container": true,
            "interface": [
              "file_operations.cdev"
            ],
            "parameter": true
          },
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      },
      "cdev_init": {
        "actions": {
          "assign": {
            "comment": "Extract a file_operations structure pointer.",
            "condition": [],
            "trace relevant": true,
            "statements": [
              "%cdev% = $ARG1;",
              "%file_operations% = $ARG2;",
              "%cdev%->ops = %file_operations%;"
            ]
          },
          "register": {
            "parameters": [
              "%file_operations%"
            ]
          }
        },
        "comment": "Register cdev structure of the character driver.",
        "labels": {
          "cdev": {
            "container": true,
            "interface": [
              "file_operations.cdev"
            ],
            "parameter": true
          },
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register]",
        "reference": true
      },
      "debugfs_create_dir": {
        "headers": ["linux/fs.h"],
        "actions": {
          "assign": {
            "comment": "Allocate memory for external model dentry and inode.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%dentry%);",
              "$ALLOC(%inode%);",
              "%inode%->i_mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;",
	          "%dentry%->d_parent = $ARG2;",
              "%dentry%->d_inode = %inode%;",
              "return %dentry%;"
            ]
          },
          "fail": {
            "comment": "Failed to create a file in the debugfs filesystem.",
            "trace relevant": true,
            "statements": [
              "return ERR_PTR(-ENODEV);"
            ]
          }
        },
        "comment": "Create a file in the debugfs filesystem.",
        "labels": {
          "dentry": {
            "declaration": "struct dentry *d"
          },
          "inode": {
            "declaration": "struct inode *inode"
          }
        },
        "process": "<assign> | <fail>",
        "reference": true
      },
      "debugfs_create_file": {
        "headers": [
          "linux/fs.h",
          "ldv/common/list.h"
        ],
        "actions": {
          "assign": {
            "comment": "Allocate memory for model dentry and inode.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%dentry%);",
              "$ALLOC(%inode%);",
              "%inode%->i_mode = $ARG2;",
              "%dentry%->d_parent = $ARG3;",
              "%inode%->i_private = $ARG4;",
              "%file_operations% = $ARG5;",
              "%dentry%->d_inode = %inode%;",
              "ldv_save_allocated_memory_to_list(%dentry%);"
            ]
          },
          "fail": {
            "comment": "Failed to create a file in the debugfs filesystem.",
            "trace relevant": true,
            "statements": [
              "return ERR_PTR(-ENODEV);"
            ]
          },
          "register": {
            "comment": "Register provided file_operations callbacks.",
            "parameters": [
              "%file_operations%"
            ]
          },
          "success": {
            "comment": "Successfully created a file in the debugfs filesystem.",
            "trace relevant": true,
            "statements": [
              "return %dentry%;"
            ]
          }
        },
        "comment": "Create a file in the debugfs filesystem.",
        "labels": {
          "dentry": {
            "declaration": "struct dentry *d"
          },
          "inode": {
            "declaration": "struct inode *inode"
          },
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      },
      "debugfs_remove": {
        "actions": {
          "assign": {
            "comment": "Get dentry.",
            "condition": [],
            "trace relevant": false,
            "statements": [
              "%dentry% = $ARG1;"
            ]
          },
          "created": {
            "comment": "Free memory for model data.",
            "condition": ["!IS_ERR_OR_NULL(%dentry%)"],
            "trace relevant": true,
            "statements": [
              "%inode% = %dentry%->d_inode;",
              "$FREE(%inode%);",
              "$FREE(%dentry%);"
            ]
          },
          "not_created": {
            "comment": "Do not free any memory in case of NULL or IS_ERR.",
            "condition": ["IS_ERR_OR_NULL(%dentry%)"],
            "trace relevant": true,
            "statements": []
          },
          "deregister": {
            "parameters": [
              "%file_operations%"
            ]
          }
        },
        "comment": "Deregister miscellaneous character driver.",
        "labels": {
          "dentry": {
            "declaration": "struct dentry *d"
          },
          "inode": {
            "declaration": "struct inode *inode"
          },
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          }
        },
        "process": "<assign>.(<created>.[deregister] | <not_created>)",
        "reference": true
      },
      "misc_deregister": {
        "actions": {
          "assign": {
            "comment": "Extract a file_operations structure pointer.",
            "condition": [],
            "trace relevant": true,
            "statements": [
              "%miscdevice% = $ARG1;",
              "%file_operations% = %miscdevice%->fops;"
            ]
          },
          "deregister": {
            "parameters": [
              "%file_operations%"
            ]
          }
        },
        "comment": "Deregister miscellaneous character driver.",
        "labels": {
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          },
          "miscdevice": {
            "container": true,
            "interface": [
              "file_operations.miscdevice"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      },
      "misc_register": {
        "actions": {
          "assign": {
            "comment": "Extract a file_operations structure pointer.",
            "trace relevant": true,
            "statements": [
              "%miscdevice% = $ARG1;",
              "%file_operations% = %miscdevice%->fops;"
            ]
          },
          "fail": {
            "comment": "Fail to register the miscellaneous character driver.",
            "trace relevant": true,
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "comment": "Register file_operations callbacks of the miscellaneous character driver.",
            "parameters": [
              "%file_operations%"
            ]
          },
          "success": {
            "comment": "Successfully registered the miscellaneous character driver.",
            "trace relevant": true,
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Register miscellaneous character driver.",
        "labels": {
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ]
          },
          "miscdevice": {
            "container": true,
            "interface": [
              "file_operations.miscdevice"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      },
      "register_chrdev": {
        "actions": {
          "assign": {
            "comment": "Extract a file_operations structure pointer.",
            "trace relevant": true,
            "statements": [
              "%file_operations% = $ARG3;"
            ]
          },
          "fail": {
            "comment": "Failed to register the cdev.",
            "trace relevant": true,
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "comment": "Register provided file_operations callbacks.",
            "parameters": [
              "%file_operations%"
            ]
          },
          "success": {
            "comment": "Successfully registered the cdev.",
            "trace relevant": true,
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Create and register a cdev occupying a range of minors.",
        "labels": {
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      },
      "unregister_chrdev": {
        "actions": {
          "deregister": {
            "parameters": [
              "%file_operations%"
            ]
          }
        },
        "comment": "Unregister and destroy a cdev.",
        "labels": {
          "file_operations": {
            "container": true,
            "interface": [
              "file_operations.file_operations"
            ],
            "pointer": true
          }
        },
        "process": "[@deregister]",
        "reference": true
      }
    }
  }
}
