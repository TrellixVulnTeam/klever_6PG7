{
  "3.14": {
    "environment processes": {
      "traverse_kernel_items_scenario": {
        "actions": {
          "deregister": {
            "condition": [
              "%seq_file% == $ARG1"
            ],
            "parameters": [
              "%seq_file%"
            ]
          },
          "fail": {
            "comment": "Failed to proceed with traversing.",
            "condition": [
              "ldv_is_err_or_null(%ret%)"
            ]
          },
          "free": {
            "comment": "Free memory of auxiliary variables.",
            "trace relevant": true,
            "statements": [
              "$FREE(%index%);"
            ]
          },
          "init": {
            "comment": "Allocate memory for auxiliary variables.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%index%);"
            ]
          },
          "inner_loop": {
            "comment": "New iteration of sequence traversing.",
            "process": "<success>.[show].(<success_show>.[next].{inner_loop} | [stop1].{outer_loop}) | <fail>.[stop2].{outer_loop}"
          },
          "next": {
            "callback": "%ops.next%",
            "callback return value": "%ret%",
            "comment": "Advance to the new item.",
            "parameters": [
              "%seq_file%",
              "%ret%",
              "%index%"
            ]
          },
          "outer_loop": {
            "comment": "Traverse sequence or do nothing.",
            "process": "[start].{inner_loop} | <free>.(deregister)"
          },
          "register": {
            "parameters": [
              "%seq_file%",
              "%ops%"
            ]
          },
          "show": {
            "callback": "%ops.show%",
            "callback return value": "%show_ret%",
            "comment": "Show current item: put data into the seq_file output buffer.",
            "parameters": [
              "%seq_file%",
              "%ret%"
            ]
          },
          "start": {
            "callback": "%ops.start%",
            "callback return value": "%ret%",
            "comment": "Initialize data for walking through a list of kernel items.",
            "parameters": [
              "%seq_file%",
              "%index%"
            ],
            "pre-call": [
              "*%index% = 0;"
            ]
          },
          "stop1": {
            "callback": "%ops.stop%",
            "comment": "End of the sequence is reached, do necessary cleanup.",
            "parameters": [
              "%seq_file%",
              "%ret%"
            ],
            "post-call": [
              "%seq_file%->index = *%index%;"
            ],
            "pre-call": [
              "%seq_file%->index = *%index%;"
            ]
          },
          "stop2": {
            "callback": "%ops.stop%",
            "comment": "End of the sequence is reached, do necessary cleanup.",
            "parameters": [
              "%seq_file%",
              "%ret%"
            ],
            "post-call": [
              "%seq_file%->index = *%index%;"
            ],
            "pre-call": [
              "%seq_file%->index = *%index%;"
            ]
          },
          "success": {
            "comment": "Proceed with traversing further.",
            "condition": [
              "!ldv_is_err_or_null(%ret%)"
            ]
          },
          "success_show": {
            "comment": "Current item has been shown successfully.",
            "condition": [
              "%show_ret% >= 0"
            ]
          }
        },
        "comment": "Write /proc file.",
        "labels": {
          "index": {
            "declaration": "loff_t *a",
            "pointer": true
          },
          "ops": {
            "container": true,
            "interface": [
              "seq_operations.seq_operations"
            ]
          },
          "ret": {
            "declaration": "void *a",
            "value": "ldv_undef_ptr()"
          },
          "seq_file": {
            "interface": [
              "seq_operations.seq_file"
            ],
            "resource": true
          },
          "show_ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "process": "(!register).<init>.{outer_loop}",
        "reference": true
      }
    },
    "functions models": {
      "seq_open, seq_open_private": {
        "actions": {
          "assign": {
            "comment": "Alloc memory for sequential file structure and initialize it.",
            "trace relevant": true,
            "statements": [
              "$ALLOC(%seq_file%);",
              "%ops% = $ARG2;",
              "%file%->private_data = %seq_file%;"
            ]
          },
          "register": {
            "parameters": [
              "%seq_file%",
              "%ops%"
            ]
          }
        },
        "comment": "Initialize sequential file.",
        "labels": {
          "file": {
            "interface": [
              "seq_operations.file"
            ],
            "parameter": true,
            "resource": true
          },
          "ops": {
            "container": true,
            "interface": [
              "seq_operations.seq_operations"
            ],
            "parameter": true
          },
          "seq_file": {
            "interface": [
              "seq_operations.seq_file"
            ],
            "resource": true
          }
        },
        "process": "<assign>.[register]",
        "reference": true
      },
      "seq_release, seq_release_private": {
        "actions": {
          "assign": {
            "comment": "Free memory of the sequential file structure.",
            "trace relevant": true,
            "statements": [
              "%seq_file% = %file%->private_data;",
              "$FREE(%seq_file%);"
            ]
          },
          "deregister": {
            "parameters": [
              "%seq_file%"
            ]
          }
        },
        "comment": "Free the structures associated with sequential file.",
        "labels": {
          "file": {
            "interface": [
              "seq_operations.file"
            ],
            "parameter": true,
            "resource": true
          },
          "seq_file": {
            "interface": [
              "seq_operations.seq_file"
            ],
            "resource": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      }
    }
  }
}