/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file ("$this")
{
#include <linux/spinlock.h>
#include <linux/types.h>
#include <ldv/verifier/common.h>
#include <ldv/verifier/nondet.h>

struct mutex;

extern void mutex_lock(struct mutex *lock);
extern void mutex_lock_nested(struct mutex *, unsigned int);
extern int mutex_lock_interruptible(struct mutex *lock);
extern int mutex_lock_killable(struct mutex *lock);

extern void ldv_mutex_model_lock(struct mutex *lock, char *sign);
extern int ldv_mutex_model_is_locked(struct mutex *lock, char *sign);
extern void ldv_mutex_model_unlock(struct mutex *lock, char *sign);

extern void __ldv_spin_lock(spinlock_t *lock);
extern void __ldv_spin_unlock(spinlock_t *lock);
extern int __ldv_spin_trylock(spinlock_t *lock);
extern void __ldv_spin_unlock_wait(spinlock_t *lock);
extern void __ldv_spin_can_lock(spinlock_t *lock);
extern int __ldv_atomic_dec_and_lock(spinlock_t *lock);

extern void ldv_spin_model_lock(char* argsign);
extern void ldv_spin_model_unlock(char* argsign);
extern int ldv_spin_model_is_locked(char* argsign);
}

around: define(mutex_lock_interruptible(lock))
{
mutex_lock_interruptible(lock)
}

around: define(mutex_lock_nested(lock, subclass))
{
mutex_lock_nested(lock, subclass)
}

around: define(mutex_lock_killable(lock))
{
mutex_lock_killable(lock)
}

around: define(mutex_lock(lock))
{
mutex_lock(lock)
}

around: call(void mutex_lock(struct mutex *)) || call(void mutex_lock_nested(struct mutex *, unsigned int))
{
	ldv_mutex_model_lock($arg1, "$arg_sign1");
}

around: call(int mutex_lock_interruptible(struct mutex *)) || call(int mutex_lock_killable(struct mutex *))
{
	int nondetermined = ldv_undef_int();

	if(nondetermined)
	{
		ldv_mutex_model_lock($arg1, "$arg_sign1");
		/* NOTE Finish with success */
		return 0;
	}
	else
	{
		/* NOTE Finish with fail. Mutex is keeped unlocked */
		return -4;
	}
}

around: call(static inline int mutex_is_locked(struct mutex *))
{
	return ldv_mutex_model_is_locked($arg1, "$arg_sign1");
}

around: call(int mutex_trylock(struct mutex *))
{
	int is_mutex_held_by_another_thread = ldv_undef_int();

	if (is_mutex_held_by_another_thread)
	{
		/* NOTE Finish with fail */
		return 0;
	}
	else
	{
		ldv_mutex_model_lock($arg1, "$arg_sign1");
		/* NOTE Finish with success */
		return 1;
	}
}

around: call(int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *))
{
	int atomic_value_after_dec = ldv_undef_int();
	if (atomic_value_after_dec == 0)
	{
		/* NOTE Lock mutex, as atomic has decremented to zero */
		ldv_mutex_model_lock($arg2, "$arg_sign2");
		/* NOTE Return 1 with locked mutex */
		return 1;
	}

	/* NOTE Atomic decrement is still not zero, return 0 without locking mutex */
	return 0;
}

around: call(void mutex_unlock(struct mutex *))
{
	ldv_mutex_model_unlock($arg1, "$arg_sign1");
}


around: define(spin_lock(lock))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_bh(lock))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_irq(lock))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_nested(lock, subclass))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_nest_lock(lock, nest_lock))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_irqsave(lock, flags))
{
__ldv_spin_lock(lock)
}

around: define(spin_lock_irqsave_nested(lock, flags, subclass))
{
__ldv_spin_lock(lock)
}

before: call(static inline void spin_lock(..)) ||
        call(static inline void spin_lock_bh(..)) ||
        call(static inline void spin_lock_irq(..)) ||
        call(void __ldv_spin_lock(..))
{
	ldv_spin_model_lock("$arg_sign1");
}

around: define(spin_unlock(lock))
{
	__ldv_spin_unlock(lock)
}

around: define(spin_unlock_bh(lock))
{
    __ldv_spin_unlock(lock)
}

around: define(spin_unlock_irq(lock))
{
	__ldv_spin_unlock(lock)
}

around: define(spin_unlock_irqrestore(lock, flags))
{
	__ldv_spin_unlock(lock)
}

before: call(static inline void spin_unlock(..)) ||
        call(static inline void spin_unlock_bh(..)) ||
        call(static inline void spin_unlock_irq(..)) ||
        call(static inline void spin_unlock_irqrestore(..)) ||
        call(void __ldv_spin_unlock(..))
{
	ldv_spin_model_unlock("$arg_sign1");
}

around: define(spin_trylock(lock))
{
__ldv_spin_trylock(lock)
}

around: define(spin_trylock_bh(lock))
{
__ldv_spin_trylock(lock)
}

around: define(spin_trylock_irq(lock))
{
__ldv_spin_trylock(lock)
}

around: define(spin_trylock_irqsave(lock, flags))
{
__ldv_spin_trylock(lock)
}

after: call(static inline int spin_trylock(..)) ||
       call(static inline int spin_trylock_bh(..)) ||
       call(static inline int spin_trylock_irq(..)) ||
       call(int __ldv_spin_trylock(..))
{
	int is_spin_held_by_another_thread = ldv_undef_int();

	if (is_spin_held_by_another_thread)
	{
		/* NOTE Spin was not locked. Finish with fail */
		return 0;
	} else {
		ldv_spin_model_lock("$arg_sign1");
		/* NOTE Finish with success */
		return 1;
	}
}

around: define(spin_unlock_wait(lock))
{
}

before: call(static inline void spin_unlock_wait(..)) ||
        call(void __ldv_spin_unlock_wait(..))
{
}

after: call(static inline int spin_is_locked(..))
{
	return ldv_spin_model_is_locked("$arg_sign1");
}

around: define(spin_can_lock(lock))
{
	return !ldv_spin_model_is_locked("$arg_sign1");
}

after: call(static inline int spin_can_lock(..)) ||
       call(void __ldv_spin_can_lock(..))
{
	return ldv_spin_model_is_locked("$arg_sign1");
}

after: call(static inline int spin_is_contended(..))
{
	int is_spin_contended;

	is_spin_contended = ldv_undef_int();

	if(is_spin_contended)
	{
		/* NOTE Spinlock is contended */
		return 0;
	}
	else
	{
		/* NOTE Spinlock is not contended */
		return 1;
	}
}

around: define(atomic_dec_and_lock(atomic, lock))
{
__ldv_atomic_dec_and_lock(lock)
}

after: call(int __ldv_atomic_dec_and_lock(..))
{
	int atomic_value_after_dec;

	atomic_value_after_dec = ldv_undef_int();

	if (atomic_value_after_dec == 0)
	{
		ldv_spin_model_lock( "$arg_sign1" );
		/* NOTE Finish with success */
		return 1;
	}

	/* RETURN Atomic decrement result is not zero. Finish with fail without locking spin{{ arg_sign.text }} */
	return 0;
}
