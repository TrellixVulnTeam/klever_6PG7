/*
 * Copyright (c) 2021 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file("$this")
{
#include <ldv/linux/vmalloc.h>
} 

around: call(void *vmalloc(unsigned long size)) ||
        call(void *vmalloc_user(unsigned long size)) ||
        call(void *vmalloc_node(unsigned long size, ..)) ||
        call(void *vmalloc_exec(unsigned long size)) ||
        call(void *vmalloc_32(unsigned long size)) ||
        call(void *vmalloc_32_user(unsigned long size))
{
	return ldv_vmalloc(size);
}

around: call(void *vzalloc(unsigned long size)) ||
        call(void *vzalloc_node(unsigned long size, ..))
{
	return ldv_vzalloc(size);
}

around: call(void vfree(const void *addr)) ||
        /* Original kvfree() distinguishes continuous and non-continuous memory, but this does not matter for our model
           that simply frees it via free(). */
        call(void kvfree(const void *addr))
{
	return ldv_vfree(addr);
}
