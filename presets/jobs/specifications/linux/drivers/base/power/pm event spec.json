{
  "2.6.33": {
    "environment processes": {
      "pm_ops_scenario": {
        "actions": {
          "complete": {
            "callback": "%pm_ops.complete%",
            "comment": "Undo the changes made by @prepare().",
            "parameters": [
              "%device%"
            ]
          },
          "do": {
            "comment": "Begin a power management scenario.",
            "process": "[runtime_idle].{do} | [runtime_suspend].[runtime_resume].{do} | [prepare].([suspend].([suspend_noirq].[resume_noirq] | <skip_noirq1>).[resume] | [freeze].(<skip_noirq2> | [freeze_noirq].[thaw_noirq]).[thaw] | [poweroff].([poweroff_noirq].[restore_noirq] | <skip_noirq3>).[restore]).[complete].{do} | (pm_deregister)"
          },
          "freeze": {
            "callback": "%pm_ops.freeze%",
            "comment": "Prepare for creating a hibernation image.",
            "parameters": [
              "%device%"
            ]
          },
          "freeze_noirq": {
            "callback": "%pm_ops.freeze_noirq%",
            "comment": "Complete the actions started by @freeze() that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ]
          },
          "pm_deregister": {
            "comment": "Do not expect power management scenarios.",
            "parameters": []
          },
          "pm_register": {
            "comment": "Ready for a power management scenarios.",
            "parameters": []
          },
          "poweroff": {
            "callback": "%pm_ops.poweroff%",
            "comment": "Hibernation image has been created.",
            "parameters": [
              "%device%"
            ]
          },
          "poweroff_noirq": {
            "callback": "%pm_ops.poweroff_noirq%",
            "comment": "Complete the actions started by @poweroff().",
            "parameters": [
              "%device%"
            ]
          },
          "prepare": {
            "callback": "%pm_ops.prepare%",
            "comment": "Prevent new children of the device from being registered.",
            "parameters": [
              "%device%"
            ]
          },
          "restore": {
            "callback": "%pm_ops.restore%",
            "comment": "Restoration of the contents of main memory from a hibernation image has been done.",
            "parameters": [
              "%device%"
            ]
          },
          "restore_noirq": {
            "callback": "%pm_ops.restore_noirq%",
            "comment": "Prepare for the execution of @restore() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ]
          },
          "resume": {
            "callback": "%pm_ops.resume%",
            "comment": "Make the device start working again after resume.",
            "parameters": [
              "%device%"
            ]
          },
          "resume_noirq": {
            "callback": "%pm_ops.resume_noirq%",
            "comment": "Prepare for the @resume() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ]
          },
          "runtime_idle": {
            "callback": "%pm_ops.runtime_idle%",
            "comment": "Device appears to be inactive and it might be put into a low-power state if all of the necessary conditions are satisfied.",
            "parameters": [
              "%device%"
            ]
          },
          "runtime_resume": {
            "callback": "%pm_ops.runtime_resume%",
            "comment": "Put the device into the fully active state in response to a wakeup event generated by hardware or at the request of software.",
            "parameters": [
              "%device%"
            ]
          },
          "runtime_suspend": {
            "callback": "%pm_ops.runtime_suspend%",
            "comment": "The device should be put into a low-power state to prevent communication of the device with the CPU(s) and RAM.",
            "parameters": [
              "%device%"
            ]
          },
          "skip_noirq1": {
            "comment": "Skip noirq callbacks",
            "statements": []
          },
          "skip_noirq2": {
            "comment": "Skip noirq callbacks",
            "statements": []
          },
          "skip_noirq3": {
            "comment": "Skip noirq callbacks",
            "statements": []
          },
          "suspend": {
            "callback": "%pm_ops.suspend%",
            "comment": "Quiesce subsystem-level device before suspend.",
            "parameters": [
              "%device%"
            ]
          },
          "suspend_noirq": {
            "callback": "%pm_ops.suspend_noirq%",
            "comment": "Expect that the device will be in a low-power state.",
            "parameters": [
              "%device%"
            ]
          },
          "thaw": {
            "callback": "%pm_ops.thaw%",
            "comment": "The hibernation image has created or creation has failed.",
            "parameters": [
              "%device%"
            ]
          },
          "thaw_noirq": {
            "callback": "%pm_ops.thaw_noirq%",
            "comment": "Prepare for the execution of @thaw() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ]
          }
        },
        "comment": "Invoke power management callbacks.",
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          }
        },
        "process": "(!pm_register).{do}"
      }
    },
    "functions models": {}
  },
  "3.14": {
    "environment processes": {
      "pm_ops_scenario": {
        "actions": {
          "do": {
            "comment": "Begin a power management scenario.",
            "process": "<runt_enabled>.{runt} | {normal} | (pm_deregister)"
          },
          "runt_enabled": {
            "comment": "Check that runtime callbacks are enabled",
            "condition": [
              "emg_runtime_enabled == 1 && emg_runtime_lowpower == 1"
            ]
          },
          "runt": {
            "comment": "Begin a runtime scenario.",
            "process": "([runtime_idle] | [runtime_suspend].(<run_ok>.{run_resume} | <run_bad>)).(pm_deregister) "
          },
          "run_resume": {
            "comment": "Begin a runtime resume scenario.",
            "process": "[runtime_resume].(<runr_ok> | <runr_bad>.{run_resume}).(pm_deregister)"
          },
          "normal": {
            "comment": "Begin prepare-complete scenario.",
            "process": "[prepare].(<pre_ok>.({sus} | {fr} | {poff}) | <pre_bad> ).(pm_deregister)"
          },
          "compl": {
            "comment": "Do completing.",
            "process": "[complete].(pm_deregister)"
          },
          "sus": {
            "comment": "Begin suspend-resume scenario.",
            "process": "[suspend].(<sus_ok>.({no_irq} | {slate}) | <sus_bad>.{sus})"
          },
          "no_irq": {
            "comment": "Begin noirq suspending.",
            "process": "[suspend_noirq].(<snoirq_ok>.{resnoirq} | <snoirq_bad>).{no_irq}"
          },
          "resnoirq": {
            "comment": "Begin noirq resuming.",
            "process": "[resume_noirq].(<rnoirq_ok>.{res} | <rnoirq_bad>).{resnoirq}"
          },
          "slate": {
            "comment": "Begin late suspending scenario.",
            "process": "[suspend_late].(<sl_ok>.{reslate} | <sl_bad>).{slate}"
          },
          "reslate": {
            "comment": "Begin early resuming.",
            "process": "[resume_early].(<rearly_ok>.{res} | <rearly_bad>).{reslate}"
          },
          "res": {
            "comment": "Begin main resuming.",
            "process": "[resume].(<resume_ok>.{compl} | <resume_bad>.{res})"
          },
          "fr": {
            "comment": "Begin freeaing.",
            "process": "[freeze].(<freeze_ok>.({fnoirq} | {flate}) | <freeze_bad>.{fr})"
          },
          "fnoirq": {
            "comment": "Begin noirq freezing.",
            "process": "[freeze_noirq].(<fnoirq_ok>.{tnoirq} | <fnoirq_bad>).{fnoirq}"
          },
          "tnoirq": {
            "comment": "Begin noirq thawing.",
            "process": "[thaw_noirq].(<tnoirq_ok>.{th} | <tnoirq_bad>).{tnoirq}"
          },
          "flate": {
            "comment": "Begin late freezing.",
            "process": "[freeze_late].(<fl_ok>.{thlate} | <fl_bad>).{flate}"
          },
          "thlate": {
            "comment": "Begin early thawing.",
            "process": "[thaw_early].(<tearly_ok>.{th} | <tearly_bad>).{thlate}"
          },
          "th": {
            "comment": "Begin resume scenario.",
            "process": "[thaw].(<thaw_ok>.{compl} | <thaw_bad>.{th})"
          },
          "poff": {
            "comment": "Begin runtime resume scenario.",
            "process": "[poweroff].(<poff_ok>.({pno_irq} | {plate}) | <poff_bad>.{poff})"
          },
          "pno_irq": {
            "comment": "Begin runtime resume scenario.",
            "process": "[poweroff_noirq].(<pno_irq_ok>.{restnoirq} | <pno_irq_bad>).{pno_irq}"
          },
          "restnoirq": {
            "comment": "Begin runtime resume scenario.",
            "process": "[restore_noirq].(<restnoirq_ok>.{rest} | <restnoirq_bad>).{restnoirq}"
          },
          "plate": {
            "comment": "Begin runtime resume scenario.",
            "process": "[poweroff_late].(<plate_ok>.{reste} | <plate_bad>).{plate}"
          },
          "reste": {
            "comment": "Begin runtime resume scenario.",
            "process": "[restore_early].(<reste_ok>.{rest} | <reste_bad>).{reste}"
          },
          "rest": {
            "comment": "Begin resume scenario.",
            "process": "[restore].(<rest_ok>.{compl} | <rest_bad>.{rest})"
          },
          "run_ok, runr_ok, pre_ok, sus_ok, snoirq_ok, rnoirq_ok, sl_ok, rearly_ok, resume_ok, sus_ok, fnoirq_ok, tnoirq_ok, fl_ok, tearly_ok, resume_ok, poff_ok, pno_irq_ok, tnoirq_ok, plate_ok, reste_ok, rest_ok, restnoirq_ok, freeze_ok, thaw_ok": {
            "comment": "Callback successfully finished.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "run_bad, runr_bad, pre_bad, sus_bad, snoirq_bad, rnoirq_bad, sl_bad, rearly_bad, resume_bad, sus_bad, fnoirq_bad, tnoirq_bad, fl_bad, tearly_bad, resume_bad, sus_bad, pno_irq_bad, tnoirq_bad, plate_bad, reste_bad, rest_bad, restnoirq_bad, freeze_bad, poff_bad, thaw_bad": {
            "comment": "Callback failed.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "complete": {
            "callback": "%pm_ops.complete%",
            "comment": "Undo the changes made by @prepare().",
            "parameters": [
              "%device%"
            ]
          },
          "freeze": {
            "callback": "%pm_ops.freeze%",
            "comment": "Prepare for creating a hibernation image.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "freeze_late": {
            "callback": "%pm_ops.freeze_late%",
            "comment": "Continue operations started by @freeze().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "freeze_noirq": {
            "callback": "%pm_ops.freeze_noirq%",
            "comment": "Complete the actions started by @freeze() that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "pm_deregister": {
            "comment": "Do not expect power management scenarios.",
            "parameters": []
          },
          "pm_register": {
            "comment": "Ready for a power management scenarios.",
            "parameters": []
          },
          "poweroff": {
            "callback": "%pm_ops.poweroff%",
            "comment": "Hibernation image has been created.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "poweroff_late": {
            "callback": "%pm_ops.poweroff_late%",
            "comment": "Continue operations started by @poweroff().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "poweroff_noirq": {
            "callback": "%pm_ops.poweroff_noirq%",
            "comment": "Complete the actions started by @poweroff().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "prepare": {
            "callback": "%pm_ops.prepare%",
            "comment": "Prevent new children of the device from being registered.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "restore": {
            "callback": "%pm_ops.restore%",
            "comment": "Restoration of the contents of main memory from a hibernation image has been done.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "restore_early": {
            "callback": "%pm_ops.restore_early%",
            "comment": "Prepare to execute @restore().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "restore_noirq": {
            "callback": "%pm_ops.restore_noirq%",
            "comment": "Prepare for the execution of @restore() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "resume": {
            "callback": "%pm_ops.resume%",
            "comment": "Make the device start working again after resume.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "resume_early": {
            "callback": "%pm_ops.resume_early%",
            "comment": "Prepare to execute @resume().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "resume_noirq": {
            "callback": "%pm_ops.resume_noirq%",
            "comment": "Prepare for the @resume() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "runtime_idle": {
            "callback": "%pm_ops.runtime_idle%",
            "comment": "Device appears to be inactive and it might be put into a low-power state if all of the necessary conditions are satisfied.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "runtime_resume": {
            "callback": "%pm_ops.runtime_resume%",
            "comment": "Put the device into the fully active state in response to a wakeup event generated by hardware or at the request of software.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);",
              "if (%ret%)",
              " emg_runtime_lowpower = 0;"
            ]
          },
          "runtime_suspend": {
            "callback": "%pm_ops.runtime_suspend%",
            "comment": "The device should be put into a low-power state to prevent communication of the device with the CPU(s) and RAM.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);",
              "if (%ret%)",
              " emg_runtime_lowpower = 1;"
            ]
          },
          "suspend": {
            "callback": "%pm_ops.suspend%",
            "comment": "Quiesce subsystem-level device before suspend.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "suspend_late": {
            "callback": "%pm_ops.suspend_late%",
            "comment": "Continue operations started by @suspend().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "suspend_noirq": {
            "callback": "%pm_ops.suspend_noirq%",
            "comment": "Expect that the device will be in a low-power state.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "thaw": {
            "callback": "%pm_ops.thaw%",
            "comment": "The hibernation image has created or creation has failed.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "thaw_early": {
            "callback": "%pm_ops.thaw_early%",
            "comment": "Prepare to execute @thaw().",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "thaw_noirq": {
            "callback": "%pm_ops.thaw_noirq%",
            "comment": "Prepare for the execution of @thaw() performing actions that might be racing with device's interrupt handler.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          }
        },
        "comment": "Invoke power management callbacks.",
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "process": "(!pm_register).{do}",
        "reference": true
      }
    },
    "functions models": {
      "pm_runtime_force_resume": {
        "headers": ["linux/device.h"],
        "comment": "Forcefully do runtime resuming.",
        "actions": {
          "assign": {
            "comment": "Get 'device' as an argument.",
            "statements": [
              "%device% = $ARG1;"
            ]
          },
          "runtime_resume": {
            "callback": "%pm_ops.runtime_resume%",
            "comment": "Put the device into the fully active state in response to a wakeup event generated by hardware or at the request of software.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);",
              "if (%ret%)",
              " emg_runtime_lowpower = 0;"
            ]
          },
          "return": {
            "comment": "Return result.",
            "statements": [
              "return %ret%;"
            ]
          }
        },
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<assign>.[runtime_resume].<return>",
        "reference": true
      },
      "pm_runtime_force_suspend": {
        "headers": ["linux/device.h"],
        "comment": "Forcefully do runtime suspending.",
        "actions": {
          "assign": {
            "comment": "Get 'device' as an argument.",
            "statements": [
              "%device% = $ARG1;"
            ]
          },
          "runtime_suspend": {
            "callback": "%pm_ops.runtime_suspend%",
            "comment": "The device should be put into a low-power state to prevent communication of the device with the CPU(s) and RAM.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);",
              "if (%ret%)",
              " emg_runtime_lowpower = 1;"
            ]
          },
          "return": {
            "comment": "Return result.",
            "statements": [
              "return %ret%;"
            ]
          }
        },
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<assign>.[runtime_suspend].<return>",
        "reference": true
      },
      "pm_runtime_enable": {
        "headers": ["linux/device.h"],
        "comment": "Enable runtime callbacks.",
        "actions": {
          "assign": {
            "comment": "Get 'device' as an argument.",
            "statements": [
              "%device% = $ARG1;"
            ]
          },
          "lowpower": {
            "comment": "Check status of the device.",
            "condition": [
              "emg_runtime_lowpower == 1"
            ]
          },
          "none": {
            "comment": "Check status of the device.",
            "condition": [
              "emg_runtime_lowpower == 0"
            ]
          },
          "runtime_resume": {
            "callback": "%pm_ops.runtime_resume%",
            "comment": "Put the device into the fully active state in response to a wakeup event generated by hardware or at the request of software.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "check_status": {
            "comment": "Check returned power status.",
            "condition": [
              "%ret% == 0"
            ],
            "statements": [
              "emg_runtime_lowpower = 0;"
            ]
          }
        },
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<assign>.(<lowpower>.[runtime_resume].<check_status> | <none>)",
        "reference": true
      },
      "pm_runtime_disable": {
        "headers": ["linux/device.h"],
        "comment": "Disable runtime callbacks.",
        "actions": {
          "assign": {
            "comment": "Get 'device' as an argument.",
            "statements": [
              "%device% = $ARG1;",
              "emg_runtime_enabled = 0;"
            ]
          },
          "lowpower": {
            "comment": "Check status of the device.",
            "condition": [
              "emg_runtime_lowpower == 0"
            ]
          },
          "check_status": {
            "comment": "Check returned power status.",
            "condition": [
              "%ret% == 0"
            ],
            "statements": [
              "emg_runtime_lowpower = 1;"
            ]
          },
          "runtime_suspend": {
            "callback": "%pm_ops.runtime_suspend%",
            "comment": "The device should be put into a low-power state to prevent communication of the device with the CPU(s) and RAM.",
            "parameters": [
              "%device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "none": {
            "comment": "Check status of the device.",
            "condition": [
              "emg_runtime_lowpower == 1"
            ]
          }
        },
        "labels": {
          "device": {
            "interface": [
              "pm.device"
            ],
            "resource": true
          },
          "pm_ops": {
            "container": true,
            "interface": [
              "pm.dev_pm_ops"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<assign>.(<lowpower>.[runtime_suspend].<check_status> | <none>)",
        "reference": true
      },
      "pm_runtime_set_active": {
        "headers": ["linux/device.h"],
        "comment": "Set active runtime callbacks.",
        "actions": {
          "activate": {
            "comment": "Set runtime device as active.",
            "statements": [
              "emg_runtime_lowpower = 0;"
            ]
          }
        },
        "labels": {},
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<activate>",
        "reference": true
      },
      "pm_runtime_active": {
        "headers": ["linux/device.h"],
        "comment": "Check runtime status.",
        "actions": {
          "status": {
            "comment": "Return the power device status.",
            "statements": [
              "return (bool) (1 - emg_runtime_lowpower);"
            ]
          }
        },
        "labels": {},
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<status>",
        "reference": true
      },
      "pm_runtime_suspended": {
        "headers": ["linux/device.h"],
        "comment": "Check runtime status.",
        "actions": {
          "status": {
            "comment": "Return the power device status.",
            "statements": [
              "return (bool) emg_runtime_lowpower;"
            ]
          }
        },
        "labels": {},
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<status>",
        "reference": true
      },
      "pm_runtime_enabled": {
        "headers": ["linux/device.h"],
        "comment": "Check that runtime callbacks are enabled.",
        "actions": {
          "status": {
            "comment": "Return status of the device.",
            "statements": [
              "return emg_runtime_enabled;"
            ]
          }
        },
        "labels": {},
        "declarations": {
          "environment model": {
            "emg_runtime_enabled": "int emg_runtime_enabled = 0;\n",
            "emg_runtime_status": "int emg_runtime_lowpower = 1;\n"
          }
        },
        "process": "<status>",
        "reference": true
      }
    }
  }
}