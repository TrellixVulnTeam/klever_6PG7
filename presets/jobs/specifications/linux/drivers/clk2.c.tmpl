/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <linux/types.h>
#include <ldv/linux/err.h>
#include <ldv/verifier/common.h>
#include <ldv/verifier/nondet.h>
#include <ldv/verifier/memory.h>

struct clk;

struct clk *ldv_clk_get(void)
{
	struct clk *clk;

	if (ldv_undef_int())
		clk = ldv_malloc_unknown_size();
	else
		ldv_assume(ldv_is_err(clk));

	return clk;
}

// for arg_sign in clk2_arg_signs
/* NOTE Initialize prepare counter to zero */
int ldv_prepare_count{{ arg_sign.id }} = 0;
/* NOTE Initialize enable counter to zero */
int ldv_enable_count{{ arg_sign.id }} = 0;

int ldv_clk_prepare{{ arg_sign.id }}(void)
{
	int retval = ldv_undef_int_nonpositive();

	if (!retval) {
		/* NOTE Increase prepare counter */
		ldv_prepare_count{{ arg_sign.id }}++;
		ldv_assume(ldv_prepare_count{{ arg_sign.id }} < 3);
	}

	return retval;
}

void ldv_clk_unprepare{{ arg_sign.id }}(void)
{
	if (ldv_prepare_count{{ arg_sign.id }} <= 0)
		/* ASSERT Clk{{ arg_sign.text }} should not be unprepared without preparing */
		ldv_assert();

	/* NOTE Decrease prepare counter */
	ldv_prepare_count{{ arg_sign.id }}--;
}

int ldv_clk_enable{{ arg_sign.id }}(void)
{
	int retval = ldv_undef_int_nonpositive();

	if (!retval) {
		/* NOTE Increase enable counter */
		ldv_enable_count{{ arg_sign.id }}++;
		ldv_assume(ldv_enable_count{{ arg_sign.id }} < 3);
	}

	return retval;
}

void ldv_clk_disable{{ arg_sign.id }}(void)
{
	if (ldv_enable_count{{ arg_sign.id }} <= 0)
		/* ASSERT Clk{{ arg_sign.text }} should not be disabled without enabling */
		ldv_assert();

	/* NOTE Decrease enable counter */
	ldv_enable_count{{ arg_sign.id }}--;
}

int ldv_clk_prepare_enable{{ arg_sign.id }}(void)
{
	int ret;

	ret = ldv_clk_prepare{{ arg_sign.id }}();

	if (ret)
		return ret;

	ret = ldv_clk_enable{{ arg_sign.id }}();

	if (ret) {
		ldv_clk_unprepare{{ arg_sign.id }}();
		return ret;
	}

	return 0;
}
// endfor
