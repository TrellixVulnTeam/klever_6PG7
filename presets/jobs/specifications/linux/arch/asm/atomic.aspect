/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file("$this")
{
#include <linux/types.h>

void ldv_atomic_set(atomic_t *v, int i);
int ldv_atomic_read(atomic_t *v);
void ldv_atomic_add(int i, atomic_t *v);
void ldv_atomic_sub(int i, atomic_t *v);
int ldv_atomic_sub_and_test(int i, atomic_t *v);
void ldv_atomic_inc(atomic_t *v);
void ldv_atomic_dec(atomic_t *v);
int ldv_atomic_dec_and_test(atomic_t *v);
int ldv_atomic_inc_and_test(atomic_t *v);
int ldv_atomic_add_return(int i, atomic_t *v);
int ldv_atomic_add_negative(int i, atomic_t *v);
int ldv_atomic_inc_short(short int *v);
int ldv_atomic_fetch_sub(int i, atomic_t *v);
int ldv_atomic_fetch_add(int i, atomic_t *v);
}

around: execution(static inline void atomic_set(atomic_t *v, int i))
{
	ldv_atomic_set(v, i);
}

around: execution(static inline int atomic_read(atomic_t const *v))
{
	return ldv_atomic_read(v);
}

around: execution(static inline void atomic_add(int i, atomic_t *v))
{
	ldv_atomic_add(i, v);
}

around: execution(static inline void atomic_sub(int i, atomic_t *v))
{
	ldv_atomic_sub(i, v);
}

around: execution(static inline int atomic_sub_and_test(int i, atomic_t *v))
{
	return ldv_atomic_sub_and_test(i, v);
}

around: execution(static inline void atomic_inc(atomic_t *v))
{
	ldv_atomic_inc(v);
}

around: execution(static inline void atomic_dec(atomic_t *v))
{
	ldv_atomic_dec(v);
}

around: execution(static inline int atomic_dec_and_test(atomic_t *v))
{
	return ldv_atomic_dec_and_test(v);
}

around: execution(static inline int atomic_inc_and_test(atomic_t *v))
{
	return ldv_atomic_inc_and_test(v);
}

around: execution(static inline int atomic_add_return(int i, atomic_t *v))
{
	return ldv_atomic_add_return(i, v);
}

around: execution(static inline int atomic_add_negative(int i, atomic_t *v))
{
	return ldv_atomic_add_negative(i, v);
}

around: execution(static inline short int atomic_inc_short(short int *v))
{
	return ldv_atomic_inc_short(v);
}

around: execution(static inline int atomic_fetch_sub(int i, atomic_t *v))
{
	return ldv_atomic_fetch_sub(i, v);
}

around: execution(static inline int atomic_fetch_add(int i, atomic_t *v))
{
	return ldv_atomic_fetch_add(i, v);
}
