{
  "templates": {
    "CPAchecker common": {
      "description": "Common options for the CPAchecker tool",
      "add options": [
        {"-setprop": "counterexample.export.extendedWitnessFile=witness.%d.graphml"},
        {"-setprop": "counterexample.export.exportExtendedWitness=true"},
        {"-setprop": "counterexample.export.compressWitness=false"},
        {"-setprop": "cpa.arg.witness.removeInsufficientEdges=false"},
        {"-noout": ""},
        {"-heap": "%ldv:memory size:0.8:MB%m"}
      ],
      "architecture dependant options": {
        "x86-64": {"add options": [{"-64": ""}]},
        "ARM": {"add options": [{"-setprop": "analysis.machineModel=ARM"}]}
      }
    },
    "Ultimate common": {
      "description": "Common options for the UltimateAutimizer tool",
      "add options": [
        {"--witness-name": "witness.1.graphml"},
        {"--witness-dir": "./output/"},
        {"--architecture": "64bit"}
      ]
    },
    "CPALockator races": {
      "description": "Common part of CPAchecker configuration for checking races",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! data-race) )"],
      "add options": [{"-setprop": "counterexample.export.graphml=witness.%d.graphml"}]
    },
    "CPAchecker reachability": {
      "description": "CPAchecker for reachability checking",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! call(__VERIFIER_error())) )"],
      "add options": [
        {"-ldv": ""},
        {"-setprop": "coverage.file=coverage.info"}
      ]
    },
    "CPAchecker BAM reachability": {
      "description": "CPAchecker with BAM for reachability checking",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! call(__VERIFIER_error())) )"],
      "add options": [
        {"-ldv-bam": ""},
        {"-setprop": "coverage.file=coverage.info"}
      ]
    },
    "CPAchecker BAM reachability FP": {
      "description": "CPAchecker with BAM and FPA for reachability checking",
      "inherit": "CPAchecker BAM reachability",
      "add options": [
        {"-setprop": "CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.value.ValueAnalysisCPA,cpa.predicate.BAMPredicateCPA"},
        {"-setprop": "cpa.value.ignoreFunctionValue=false"}
      ]
    },
    "CPAchecker BAM reachability bit-precise": {
      "description": "CPAchecker with bit-precise BAM for reachability checking",
      "inherit": "CPAchecker BAM reachability",
      "add options": [
        {"-setprop": "cpa.predicate.encodeBitvectorAs=BITVECTOR"},
        {"-setprop": "solver.solver=MathSAT5"}
      ]
    },
    "CPAchecker BAM reachability heap arrays": {
      "description": "CPAchecker with BAM and heap arrays for reachability checking",
      "inherit": "CPAchecker BAM reachability",
      "add options": [
        {"-setprop": "cpa.predicate.useArraysForHeap=true"},
        {"-setprop": "cpa.predicate.defaultArrayLength=20"},
        {"-setprop": "cpa.predicate.maxArrayLength=-1"}
      ]
    },
    "CPAchecker BAM BusyBox": {
      "description": "CPAchecker with BAM for reachability checking and FPA",
      "inherit": "CPAchecker BAM reachability FP",
      "add options": [
        {"-setprop": "cpa.predicate.defaultArrayLength=5"},
        {"-setprop": "cpa.predicate.maxArrayLength=5"}
      ]
    },
    "CPAchecker SMG memory checking": {
      "description": "CPAchecker with SMG for memory errors checking",
      "inherit": "CPAchecker common",
      "safety properties": [
          "CHECK( init({entry_point}()), LTL(G valid-free) )",
          "CHECK( init({entry_point}()), LTL(G valid-deref) )",
          "CHECK( init({entry_point}()), LTL(G valid-memtrack) )"
      ],
      "add options": [
        {"-smg-ldv": ""},
        {"-setprop": "CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.smg.SMGCPA"},
        {"-setprop": "parser.readLineDirectives=false"}
      ]
    },
    "CPALockator lightweight": {
      "description": "CPAchecker for checking races",
      "inherit": "CPALockator races",
      "add options": [{"-lockator-linux": ""}]
    },
    "CPALockator lightweight liteos": {
      "description": "CPAchecker for checking races",
      "inherit": "CPALockator races",
      "add options": [
        {"-lockator-liteos": ""},
        {"-setprop": "parser.readLineDirectives=false"}
      ]
    },
    "CPALockator thread-modular": {
      "description": "CPAchecker for checking races with powerful theory",
      "inherit": "CPALockator races",
      "add options": [{"-lockator-threadmodular-linux": ""}]
    },
    "CPALockator rcu": {
      "description": "CPAchecker for checking races over rcu pointers",
      "inherit": "CPALockator races",
      "add options": [{"-rcucpa": ""}]
    }
  },
  "profiles": {
    "reachability": {
      "CPAchecker": {
        "trunk:31140": {"inherit": "CPAchecker BAM reachability"}
      },
      "UltimateAutomizer": {"v0.1.20": {"inherit": "Ultimate common"}}
    },
    "reachability with function pointers": {
      "CPAchecker": {"trunk:31140": {"inherit": "CPAchecker BAM reachability FP"}}
    },
    "reachability with bit precision": {
      "CPAchecker": {
        "trunk:31140": {"inherit": "CPAchecker BAM reachability bit-precise"},
        "trunk:31503": {"inherit": "CPAchecker BAM reachability bit-precise"}
      }
    },
    "reachability with heap arrays": {
      "CPAchecker": {"trunk:31140": {"inherit": "CPAchecker BAM reachability heap arrays"}}
    },
    "CPAchecker BAM BusyBox": {
      "CPAchecker": {"trunk:31140": {"inherit": "CPAchecker BAM BusyBox"}}
    },
    "race checking lightweight": {
      "CPAchecker": {"CPALockator-combat-mode:34860": {"inherit": "CPALockator lightweight"}}
    },
    "race checking lightweight liteos": {
      "CPAchecker": {"CPALockator-combat-mode:34860": {"inherit": "CPALockator lightweight liteos"}}
    },
    "race checking": {
      "CPAchecker": {"CPALockator-combat-mode:34860": {"inherit": "CPALockator thread-modular"}}
    },
    "race checking rcu": {
      "CPAchecker": {"CPALockator-combat-mode:34860": {"inherit": "CPALockator rcu"}}
    },
    "memory checking": {
      "CPAchecker": {"trunk:31140": {"inherit": "CPAchecker SMG memory checking"}}
    }
  }
}
